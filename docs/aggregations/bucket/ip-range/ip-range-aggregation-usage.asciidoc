:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/6.1

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Aggregations/Bucket/IpRange/IpRangeAggregationUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[ip-range-aggregation-usage]]
=== Ip Range Aggregation Usage

==== Fluent DSL example

[source,csharp]
----
a => a
.IpRange("ip_ranges", ip => ip
    .Field(p => p.LeadDeveloper.IpAddress)
    .Ranges(
        r => r.To("127.0.0.1"),
        r => r.From("127.0.0.1")
    )
)
----

==== Object Initializer syntax example

[source,csharp]
----
new IpRangeAggregation("ip_ranges")
{
    Field = Field((Project p) => p.LeadDeveloper.IpAddress),
    Ranges = new List<Nest.IpRangeAggregationRange>
    {
        new Nest.IpRangeAggregationRange {To = "127.0.0.1"},
        new Nest.IpRangeAggregationRange {From = "127.0.0.1"}
    }
}
----

[source,javascript]
.Example json output
----
{
  "ip_ranges": {
    "ip_range": {
      "field": "leadDeveloper.ipAddress",
      "ranges": [
        {
          "to": "127.0.0.1"
        },
        {
          "from": "127.0.0.1"
        }
      ]
    }
  }
}
----

==== Handling Responses

[source,csharp]
----
response.ShouldBeValid();
var ipRanges = response.Aggregations.IpRange("ip_ranges");
ipRanges.Should().NotBeNull();
ipRanges.Buckets.Should().NotBeNull();
ipRanges.Buckets.Count.Should().BeGreaterThan(0);
foreach (var range in ipRanges.Buckets)
    range.DocCount.Should().BeGreaterThan(0);
----

