:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/master

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/QueryDsl/BoolDsl/Operators/OrOperatorUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[or-operator-usage]]
== Or Operator Usage

[source,csharp]
----
var lotsOfOrs = Enumerable.Range(0, Iterations).Aggregate(new QueryContainer(), (q, c) => q || Query, q => q);

LotsOfOrs(lotsOfOrs);
----

[source,csharp]
----
QueryContainer container = null;
----

[source,csharp]
----
ReturnsBool(Query || Query, q => q.Query() || q.Query(), b =>
{
    b.Should.Should().NotBeEmpty().And.HaveCount(2);
    b.Must.Should().BeNull();
    b.MustNot.Should().BeNull();
    b.Filter.Should().BeNull();
});
b.Should.Should().NotBeEmpty().And.HaveCount(2);
b.Must.Should().BeNull();
b.MustNot.Should().BeNull();
b.Filter.Should().BeNull();
ReturnsBool(Query || Query || ConditionlessQuery, q => q.Query() || q.Query() || q.ConditionlessQuery(), b =>
{
    b.Should.Should().NotBeEmpty().And.HaveCount(2);
    b.Must.Should().BeNull();
    b.MustNot.Should().BeNull();
    b.Filter.Should().BeNull();
});
b.Should.Should().NotBeEmpty().And.HaveCount(2);
b.Must.Should().BeNull();
b.MustNot.Should().BeNull();
b.Filter.Should().BeNull();
ReturnsBool(Query || Query || ConditionlessQuery, q => q.Query() || q.Query() || q.ConditionlessQuery(), b =>
{
    b.Should.Should().NotBeEmpty().And.HaveCount(2);
    b.Must.Should().BeNull();
    b.MustNot.Should().BeNull();
    b.Filter.Should().BeNull();
});
b.Should.Should().NotBeEmpty().And.HaveCount(2);
b.Must.Should().BeNull();
b.MustNot.Should().BeNull();
b.Filter.Should().BeNull();
ReturnsSingleQuery(Query || ConditionlessQuery, q => q.Query() || q.ConditionlessQuery(),
    c => c.Term.Value.Should().NotBeNull());
ReturnsSingleQuery(ConditionlessQuery || Query, q => q.ConditionlessQuery() || q.Query(),
    c => c.Term.Value.Should().NotBeNull());
ReturnsSingleQuery(Query || NullQuery, q => q.Query() || q.NullQuery(),
    c => c.Term.Value.Should().NotBeNull());
ReturnsSingleQuery(NullQuery || Query, q=> q.NullQuery() || q.Query(),
    c => c.Term.Value.Should().NotBeNull());
ReturnsSingleQuery(ConditionlessQuery || ConditionlessQuery || ConditionlessQuery || Query,
    q => q.ConditionlessQuery() || q.ConditionlessQuery() || q.ConditionlessQuery() || q.Query(),
    c => c.Term.Value.Should().NotBeNull());
ReturnsSingleQuery(
    NullQuery || NullQuery || ConditionlessQuery || Query,
    q=>q.NullQuery() || q.NullQuery() || q.ConditionlessQuery() || q.Query(),
    c => c.Term.Value.Should().NotBeNull());
ReturnsNull(NullQuery || ConditionlessQuery, q=> q.NullQuery() || q.ConditionlessQuery());
ReturnsNull(ConditionlessQuery || NullQuery, q=>q.ConditionlessQuery() || q.NullQuery());
ReturnsNull(ConditionlessQuery || ConditionlessQuery, q=>q.ConditionlessQuery() || q.ConditionlessQuery());
ReturnsNull(
    ConditionlessQuery || ConditionlessQuery || ConditionlessQuery || ConditionlessQuery,
    q=>q.ConditionlessQuery() || q.ConditionlessQuery() || q.ConditionlessQuery() || q.ConditionlessQuery()

);
ReturnsNull(
    NullQuery || ConditionlessQuery || ConditionlessQuery || ConditionlessQuery,
    q=>q.NullQuery() || q.ConditionlessQuery() || q.ConditionlessQuery() || q.ConditionlessQuery()
);
----

[source,csharp]
----
foreach(var i in Enumerable.Range(0, Iterations))
    container |= Query;

LotsOfOrs(container);
----

[source,csharp]
----
var container = new QueryContainer();
----

[source,csharp]
----
foreach(var i in Enumerable.Range(0, Iterations))
    container |= Query;

LotsOfOrs(container);
----

[source,csharp]
----
lotsOfOrs.Should().NotBeNull();

lotsOfOrs.Bool.Should().NotBeNull();

lotsOfOrs.Bool.Should.Should().NotBeEmpty().And.HaveCount(Iterations);
----

